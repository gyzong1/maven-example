# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "master" ]
  # pull_request:
  #  branches: [ "master" ]
    
permissions:
  contents: read
  id-token: write
  
jobs:   
  build:

    runs-on: ubuntu-latest
    env:
      OIDC_PROVIDER: 'github'
      OIDC_AUDIENCE: 'jfrog-github'
      POC_URL: 'https://demo.jfrogchina.com'
      

    steps:

    # add for JFrog
    - name: Get id token
      run: |
          ID_TOKEN=$(curl -sLS -H "User-Agent: actions/oidc-client" -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
          "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=jfrog-github" | jq .value | tr -d '"')
          
          # ID_TOKEN=$(curl -sLS -H "User-Agent: actions/oidc-client" -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
          "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=jfrog-github" | jq .value | tr -d '"')
          
          echo "ID_TOKEN=${ID_TOKEN}" >> $GITHUB_ENV
          # printenv

    - name: Exchange token with access
      env:
          ID_TOKEN: ${{env.ID_TOKEN}}
          JFROG_PLATFORM_URL: https://demo.jfrogchina.com/artifactory/api/oauth2/loginResponse
      run: |
          ACCESS_TOKEN=$(curl -XPOST -H "Content-Type: application/json" "https://demo.jfrogchina.com/access/api/v1/oidc/token" -d "{\"grant_type\": \"urn:ietf:params:oauth:grant-type:token-exchange\", \"subject_token_type\":\"urn:ietf:params:oauth:token-type:id_token\", \"subject_token\": \"${ID_TOKEN}\", \"provider_name\": \"github\"}" | jq .access_token | tr -d '"')
          echo "ACCESS_TOKEN=${ACCESS_TOKEN}" >> $GITHUB_ENV
          
          ## for debug
          # ACCESS_TOKEN=$(curl -XPOST -H "Content-Type: application/json" "https://demo.jfrogchina.com/artifactory/api/oauth2/loginResponse/access/api/v1/oidc/token" -d "{\"grant_type\": \"urn:ietf:params:oauth:grant-type:token-exchange\", \"subject_token_type\":\"urn:ietf:params:oauth:token-type:id_token\", \"subject_token\": \"${ID_TOKEN}\", \"provider_name\": \"github\"}" | jq .access_token | tr -d '"')
          # ACCESS_TOKEN=$(curl -XPOST -H "Content-Type: application/json" "https://demo.jfrogchina.com/access/api/v1/oidc/token" -d "{\"grant_type\": \"urn:ietf:params:oauth:grant-type:token-exchange\", \"subject_token_type\":\"urn:ietf:params:oauth:token-type:id_token\", \"subject_token\": \"${ID_TOKEN}\", \"provider_name\": \"github\"}")
          # echo "===ID_TOKEN: ${ID_TOKEN}"
          # echo "===ACCESS_TOKEN: ${ACCESS_TOKEN}"
          # echo "ACCESS_TOKEN=${ACCESS_TOKEN}" >> $GITHUB_ENV
          # printenv
    
    - uses: actions/checkout@v4
    
    - name: Set up JDK 8
      uses: actions/setup-java@v3
      with:
        java-version: '8'
        distribution: 'temurin'
        cache: maven
        
    - name: Build with Maven
      run: mvn clean install

    ## add for JFrog
    - name: Deploy to artifactory
      env:
        ACCESS_TOKEN: ${{ env.ACCESS_TOKEN }}

        ## for debug
        # echo "===ACCESS_TOKEN: ${ACCESS_TOKEN}"
        # ID_TOKEN: ${{ env.ACCESS_TOKEN }}
        # POC_URL: ${{ env.POC_URL }}
        # printenv
        
      run: |
        ls -l
        curl -H "Authorization: Bearer $ACCESS_TOKEN" -T maven.conf "${POC_URL}/artifactory/guoyz-generic-local/maven.conf"
        printenv
